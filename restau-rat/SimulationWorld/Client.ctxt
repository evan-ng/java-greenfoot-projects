#BlueJ class context
comment0.target=Client
comment0.text=\r\n\ Client\ is\ the\ superclass\ for\ critic\ and\ client.\r\n\ Client,\ once\ spawned,\ will\ claim\ a\ seat,\ and\ walk\ a\r\n\ determined\ path\ towards\ their\ seat.\ Once\ seated,\r\n\ the\ Client\ waits\ for\ food.\ If\ they\ wait\ too\ long,\ they\r\n\ leave\ without\ paying.\ If\ they\ get\ their\ food\ in\ time,\ they\r\n\ eat\ for\ as\ long\ as\ eatSpeed\ determines,\ pay,\ and\ leave\ in\r\n\ a\ determined\ path.\ Raymond\ has\ completed\ most\ of\ this\ class,\r\n\ Evan\ has\ made\ minor\ adjustments.\r\n\ \r\n\ @author\ Raymond\ Zhang\r\n\ @version\ 5\ (14/05/2020)\r\n
comment1.params=
comment1.target=void\ finishMeal()
comment1.text=\r\n\ Abstract\ method\ that\ is\ called\ once\ the\r\n\ client\ finishes\ their\ meal.\ (Pay\ and/or\r\n\ change\ star\ rating).\r\n
comment10.params=
comment10.target=void\ leaveStore()
comment10.text=\r\n\ The\ pathway\ of\ which\ client\ will\ leave\ the\ store.\r\n\ Must\ be\ called\ continuously\ so\ Client\ can\ follow\ through.\r\n
comment11.params=
comment11.target=int\ getSatisfaction()
comment11.text=\r\n\ Returns\ the\ satisfcation\ of\ the\ Client.\r\n\ This\ value\ is\ used\ to\ determine\ how\ much\ Client\r\n\ will\ pay\ and\ how\ much\ Critic\ will\ change\ the\ star\ rating.\r\n\ \r\n\ @return\ int\ \ \ \ \ How\ satisfied\ client\ is.\ 1\ is\ least\ satisfied.\ 3\ is\ most.\r\n
comment12.params=receivedFood\ w
comment12.target=void\ setReceivedFood(boolean,\ greenfoot.World)
comment12.text=\r\n\ Determines\ whether\ or\ not\ Client\ received\ food\ from\ the\ chef.\r\n\ \r\n\ @param\ receivedFood\ \ \ \ \ Whether\ or\ not\ Client\ received\ food\r\n\ @param\ w\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ World\ Client\ is\ in.\r\n
comment13.params=
comment13.target=boolean\ getReceivedFood()
comment13.text=\r\n\ Returns\ whether\ or\ not\ CLient\ received\ food\ from\ the\ chef.\r\n\ \r\n\ @return\ boolean\ \ Wheter\ or\ not\ Client\ received\ food\r\n
comment14.params=patience
comment14.target=void\ setPatience(int)
comment14.text=\r\n\ Sets\ the\ patience\ of\ the\ Client\r\n\ \r\n\ @param\ patience\ \ \ \ \ How\ much\ Client\ can\ wait.\r\n
comment15.params=
comment15.target=int\ getPatience()
comment15.text=\r\n\ Gets\ the\ patience\ of\ the\ Client\r\n\ \r\n\ @return\ int\ \ How\ much\ Client\ can\ wait.\r\n
comment16.params=
comment16.target=boolean\ getReachedSeat()
comment16.text=\r\n\ Returns\ whether\ or\ not\ Client\ reached\ their\ seat.\r\n\ \r\n\ @return\ boolean\ Wheter\ or\ not\ Client\ reached\ their\ seat\ (true\ if\ reached\ the\ Seat)\r\n
comment17.params=
comment17.target=void\ addFood()
comment17.text=\r\n\ Adds\ a\ Food\ object\ for\ the\ customer\ to\ "eat"\r\n
comment18.params=
comment18.target=void\ findSeat()
comment18.text=\r\n\ This\ is\ the\ path\ the\ Client\ must\ follow\ to\ reach\ their\ Seat.\r\n\ Must\ be\ called\ continuously\ for\ Client\ to\ follow\ through.\r\n
comment2.params=patience\ eatSpeed
comment2.target=Client(int,\ int)
comment2.text=\r\n\ A\ constructor\ that\ takes\ two\ ints\ -\ determines\r\n\ how\ patient\ a\ client\ is\ and\ how\ fast\ they\ will\ eat.\r\n\ \r\n\ @param\ patience\ \ \ \ How\ long\ a\ client\ can\ wait.\r\n\ @param\ eatSpeed\ \ \ \ How\ fast\ a\ client\ can\ eat.\r\n
comment3.params=
comment3.target=void\ act()
comment3.text=\r\n\ Act\ -\ do\ whatever\ the\ Client\ wants\ to\ do.\ This\ method\ is\ called\ whenever\ the\ \r\n\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\r\n
comment4.params=s
comment4.target=void\ setSeat(Seat)
comment4.text=\r\n\ Sets\ the\ seat\ of\ which\ the\ client\ claims\r\n\ \r\n\ @param\ s\ \ \ \ \ The\ seat\ the\ Client\ will\ sit\ at.\r\n
comment5.params=
comment5.target=Seat\ getSeat()
comment5.text=\r\n\ Gets\ the\ seat\ of\ which\ the\ client\ claims\r\n\ \r\n\ @return\ Seat\ \ \ \ \ The\ seat\ the\ Client\ will\ sit\ at.\r\n
comment6.params=w
comment6.target=void\ addedToWorld(greenfoot.World)
comment6.text=\r\n\ Adds\ the\ patience\ bar\ to\ the\ Client\ and\r\n\ updates\ it\r\n\ \r\n\ @param\ w\ \ \ \ \ The\ World\ Client\ is\ in.\r\n
comment7.params=
comment7.target=void\ enterWorld()
comment7.text=\r\n\ When\ called,\ Client\ will\ enter\ the\ world\ by\ moving.\r\n
comment8.params=
comment8.target=void\ eat()
comment8.text=\r\n\ When\ called,\ the\ client\ will\ eat.\ Adds\ food\ if\ Client\r\n\ starts\ eating.\ Counts\ down\ based\ on\ eatSpeed\ and\ will\r\n\ finish\ the\ customer's\ meal\ once\ done.\r\n
comment9.params=
comment9.target=boolean\ atWorldEdge()
comment9.text=\r\n\ Detects\ if\ Client\ is\ at\ the\ edge\ of\ the\ world.\r\n
numComments=19
